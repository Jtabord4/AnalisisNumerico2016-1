
var cambio = { 
      
    cambioModal: function(metodo) {
        var incremental = "<div><p>The incremental search method is a numerical method that is used when is needed to find an interval of two values of ‘x’ where the root is supposed to be. The incremental search method starts with an initial value x0 and an interval between the points x0 and x1, that interval is going to be called a delta. It is supposed that we are going to search the root in the x-axis from left to right.<p></div>";
        var grupo1 = "<div><p><h4>Bisection</h4><br>The bisection method is a very simple numerical method; this method uses two initial values of ‘x’, then we evaluate those values on f(x), but there is a catch, those f(x1) and f(x2) values must have opposite sign so we can assure that a root exists between x1 and x2.<h4>Secant</h4><br>The Secant method is a numerical method for solving numerical equations of one variable, is usually known as a modified Newton method because uses almost the same iterative formula, the different thing is that the Secant method do not need the derivate of the function because we are going to approximate it.<h4>False Position</h4><br>False Position Method is a numerical method used when we need to find the root of an equation, this combines the bisection and secant methods.If you want to use this method you have to be sure that continuity exists between the intervals where the root is located. This method usually needs two values of x with opposite sign so the method can be sure that a root exist between those two values.</p></div>";
        var grupo2 = "<div><p><h4>Newton</h4><br>Newton's method is one of the most used root finder numerical method because of its fast and efficient design. Unlike the false position method, this method doesn't need an interval [a,b] with opposite signs. Newton's method just need an approximate value of the root.<h4>Multiple Roots</h4><br>We have studied two classes of functions for which there is additional difficulty in calculating their roots. The first of these are functions in which the desired root has a multiplicity greater than 1</p></div>";
        var punto = "<div><p>Fixed point method allows us to solve nonlinear one variable equations. We build an iterative method, using a sequence which converges to a fixed point of g(x), this fixed point is the exact solution of f(x)=0.</p></div>";
        var interpolacion = "<div><h4>Lagrange</h4><br>The Lagrange form of the interpolation polynomial shows the linear character of polynomial interpolation and the uniqueness of the interpolation polynomial. Therefore, it is preferred in proofs and theoretical arguments.<h4>Newton</h4><br> is the interpolation polynomial for a given set of data points in the Newton form. The Newton polynomial is sometimes called Newton's divided differences interpolation polynomial because the coefficients of the polynomial are calculated using divided differences.<h4>Linear Spline</h4><br> is often preferred over polynomial interpolation because the interpolation error can be made small even when using low degree polynomials for the spline. Spline interpolation avoids the problem of Runge's phenomenon, in which oscillation can occur between points when interpolating using high degree polynomials.<h4>Cubic Spline</h4><br> is a piecewise continuous curve, passing through each of the values in the table. There is a separate cubic polynomial for each interval, each with its own coefficients: together, these polynomial segments are denoted , the spline.</div>";
        var directos = "<div><h4>Gaussian Elimination</h4><br>Let’s call a general system Ax = b with n equations,  the technique for solving this system by simple Gaussian elimination consists in generating the augmented matrix (A|b) and then get a triangular upper matrix (U|b) with elementary row operations, in less words it consists in two phases: elimination of the unknowns and get the solution by back-substitution.<h4>Partial Pivoting</h4><br>Pivoting technique consists in selecting an appropriate value of the system represented in a matrix in order to reduce the effects of rounding errors. Basically it consists in reordering the rows on the matrix to get the max value of a coefficient on the main diagonal.<h4>Complete Pivoting</h4><br>The complete pivoting method consist in detect the greatest numbers in the array and make an exchange of rows and columns to place these numbers in the main diagonal. It is necessary to note that the change of columns affects the order of the unknowns (x). Finally, when the matrix Ax = b is converted into Ux = b, the values of x can be found using back substitution. </div>";
        var iterativos = "<div><h4>Jacobi</h4><br>Jacobi’s method gives the solution of nxn linear system equations. This method starts with an initial approximation Xo, from with it finds the new “approximation”, the next step is to find a new approximation with X1 and so on … <br>This method needs and stop criterion that can be the difference between the Xn and Xn-1 approximations in absolute value or with the Euclidean norm. <h4>Gauss Seidel</h4><br>Gauss Seidel is a method that can be applied to any system of linear equations represented in a matrix of coefficients, the convergence of the method can be guaranteed if the matrix (A) is diagonally dominant or symmetrical. <br>This method allows us to find the solution to the system of equations by replacing in each equation the values ​​immediately found (k-1 iteration), so it can obtain new values ​​which will be used to calculate the new iteration. The main difference with the Jacobi method is that the Gauss Seidel method uses the values ​​found immediately, allowing the process faster and more efficient</div>";
        var lu = "<div><h4>Matrix Factorization</h4><br>Matrix factorization is an important step for solving linear system equations, it normally consists about creating two matrices that satisfies L*U = A, where A is the given matrix to factorize. L is an lower triangular matrix and U is an upper triangular matrix. L*U can be replaced into the original matrix Ax = b obtaining LUx = b, again a substitution can be applied making Ux = z, replacing on the last equation the obtained equation is Lz = b (‘x’ is the only unknown on the factorization).<h4>Crout</h4><br>Crout’s factorization exposes that the Uii elements of the U matrix are equal to 1. Remember that this method applies to the L*U factorization only.<h4>Doolittle</h4><br>Doolittle’s factorization exposes that the Lii elements of the L matrix are equal to 1. Remember that this method applies to the L*U factorization only.<h4>Cholesky</h4><br>Cholesky’s factorization exposes that the Uii elements of the U matrix are equal to the Lii elements of the L matrix. Remember that this method applies to the L*U factorization only.</div>";
        var integracion = "<div><h4>Trapezoid</h4><br>In numerical analysis, the trapezoidal rule (also known as the trapezoid rule or trapezium rule) is a technique for approximating the definite integral,  it works by approximating the region under the graph of the function f(x) as a trapezoid and calculating its area. It follows that<h4>Simpson 1/3</h4><br>Simpson's rule is a method for numerical integration, the numerical approximation of definite integrals. Simpson's rule also corresponds to the three-point Newton-Cotes quadrature rule.</div>";
        if(metodo === 'busqueda'){
            $('#titulo').html("<h2>Incremental Search</h2>"),
            $('#texto').html(incremental)
        }else if(metodo === 'grupo1'){
             $('#titulo').html("<h2>Bisection | Secant | False Position</h2>"),
             $('#texto').html(grupo1)
        }else if(metodo === 'grupo2'){
             $('#titulo').html("<h2>Newton | Multiple Roots</h2>"),
             $('#texto').html(grupo2)
        }else if(metodo === 'punto'){
            $('#titulo').html("<h2>Fixed Point</h2>"),
             $('#texto').html(punto)
        }else if(metodo === 'interpolacion'){
             $('#titulo').html("<h2>Interpolation</h2>"),
             $('#texto').html(interpolacion)
        }else if(metodo === 'iterativos'){
             $('#titulo').html("<h2>Iterative Methods</h2>"),
             $('#texto').html(iterativos)
        }else if(metodo === 'directos'){
             $('#titulo').html("<h2>Direct Methods</h2>"),
             $('#texto').html(directos)
        }else if(metodo === 'lu'){
             $('#titulo').html("<h2>LU Decomposition</h2>"),
             $('#texto').html(lu)
        }else if(metodo === 'integracion'){
             $('#titulo').html("<h2>Numerical Integration</h2>"),
             $('#texto').html(integracion)
        }                      
    }
}
